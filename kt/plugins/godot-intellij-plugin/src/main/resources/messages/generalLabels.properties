name=Godot Jvm Plugin
problem.class.notRegistered.properties=This class contains registered properties but is not registered
problem.class.notRegistered.functions=This class contains registered functions but is not registered
problem.class.notRegistered.signals=This class contains registered signals but is not registered
problem.class.constructor.defaultConstructorMissing=There is no default constructor defined. Godot needs a default constructor (no args)
problem.class.constructor.toManyParams=Godot cannot handle constructors for registered classes with more than 5 parameters. Reduce your parameter count
problem.class.constructor.overloading=Constructor overloading is not yet supported. Multiple constructors in the same class need a different argument count
problem.class.nameAlreadyRegistered=Class name already registered
problem.class.moreThanOneRegisteredClass=More than one registered class in the containing file
problem.class.wrongFileName=File name has to match class name
problem.class.wrongPackagePath=Package path has to match actual directory path
problem.function.notificationFunctionNotRegistered=Overridden notification function which is not registered will not be called by Godot.\n\
Using notification functions for other purposes than to be called from Godot is considered a bad practise.\n\
Either register it or move your logic to a custom function you defined
problem.property.hint.wrongType=Property must be of type %S
problem.property.hint.notRegistered=Property has a type hint but is not registered
problem.property.hint.toManyEnumEntries=Enums used as EnumFlags can only have a maximum of 32 entries
problem.property.mutability=Registered properties have to be mutable
problem.property.registeredKotlinCollection=Kotlin collections cannot be registered as default values. Consider using one of the godot collections. There are handy conversion functions available
problem.property.defaultValue.notConstant=Default values of registered properties have to be compile time constants or direct constructor calls
problem.signal.mutability=Registered signals have to be mutable
problem.signal.wrongType=Not of type signal. Properties annotated with @RegisterSignal have to be of type signal. Consider using one of the "by signal" delegates
quickFix.class.alreadyRegistered.familyName=Show classes registered with same name
quickFix.class.alreadyRegistered.popup.title=Jump to class
quickFix.class.notRegistered.familyName=Add @RegisterClass annotation
quickFix.function.notificationFunctionNotRegistered.familyName=Add @RegisterFunction annotation
quickFix.property.mutability.familyName=Make property mutable
notification.property.mutability.error.title=@RegisterProperty Quick Fix
notification.property.mutability.error.content=Could not change the mutability of property %S. Change it manually
notification.group.error=Error message
quickFix.signal.initializer.familyName=Use "by signal" delegate
quickFix.signal.mutability.familyName=Make signal not mutable
notification.signal.mutability.error.title=@RegisterSignal Quick Fix
notification.signal.mutability.error.content=Could not change the mutability of signal %S. Change it manually

