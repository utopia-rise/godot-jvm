name: publish
on:
  push:
    tags:
      - '^\d+.\d+.\d+-\d+.\d+.\d+$'

jobs:
  deploy_godot_library:
    runs-on: ubuntu-latest
    steps:
      - name: Get godot version from tag
        id: get_godot_version
        run: echo ::set-output name=GODOT_VERSION::$(echo "$GITHUB_REF" | grep -Po '^(?:refs\/tags\/\d+.\d+.\d+-)\K(\d+.\d+.\d+)$')
      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{ steps.get_godot_version.outputs.GODOT_VERSION }}-stable
      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Build with editor release
        run: scons platform=${{ matrix.platform }} target=release_debug
      - uses: eskatos/gradle-command-action@v1
        with:
          wrapper-directory: modules/kotlin_jvm/kt/
          build-root-directory: modules/kotlin_jvm/kt/
          arguments: godot-library:publish

  deploy_godot_gradle_plugin:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - uses: eskatos/gradle-command-action@v1
        with:
          wrapper-directory: kt/
          build-root-directory: kt/
          arguments: godot-gradle-plugin:publish

  deploy_godot_intellij_plugin:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - uses: eskatos/gradle-command-action@v1
        with:
          wrapper-directory: kt/
          build-root-directory: kt/
          arguments: godot-intellij-plugin:publishPlugin

  create-draft-release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ GITHUB_REF/refs\/tags\// }}
          release_name: ${{ GITHUB_REF/refs\/tags\// }}
          draft: true
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  deploy-editor-release:
    strategy:
      matrix:
        name: [ Linux, OSX, Windows, Android ]
        include:
          - name: Linux
            os: ubuntu-latest
            platform: x11
            binary: bin/godot.x11.tools.64
            exporttemplate: bin/godot.x11.opt.64
          - name: OSX
            os: macos-latest
            platform: osx
            binary: bin/godot.osx.tools.64
            exporttemplate: bin/godot.osx.opt.64
          - name: Windows
            os: windows-latest
            platform: windows
            binary: bin/godot.windows.tools.64.exe
            exporttemplate: bin/godot.windows.opt.64.exe
          - name: Android
            os: ubuntu-latest
            platform: android
            exporttemplate: bin/android_release.apk
    runs-on: ${{ matrix.os }}
    steps:
      - name: Configure dependencies
        if: matrix.platform == 'x11'
        run: |
          sudo apt-get update && sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      - name: Get godot version from tag
        id: get_godot_version
        run: echo ::set-output name=GODOT_VERSION::$(echo "$GITHUB_REF" | grep -Po '^(?:refs\/tags\/\d+.\d+.\d+-)\K(\d+.\d+.\d+)$')

      - name: Clone Godot Engine
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          ref: ${{ steps.get_godot_version.outputs.GODOT_VERSION }}-stable

      - name: Clone Godot JVM module.
        uses: actions/checkout@v2
        with:
          path: modules/kotlin_jvm
          submodules: recursive

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2

      - name: Build with editor release
        if: matrix.platform != 'android'
        run: scons platform=${{ matrix.platform }} target=release_debug

      - name: Build release export template
        if: matrix.platform != 'android'
        run: scons platform=${{ matrix.platform }} tools=no target=release bits=64

      - name: Build android release binary arm64v8
        if: matrix.platform == 'android'
        run: scons platform=${{ matrix.platform }} target=release android_arch=arm64v8

      - name: Build android release export template
        if: matrix.platform == 'android'
        run: cd platform/android/java/ && ./gradlew generateGodotTemplates

      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}

      - name: Upload editor binary
        if: matrix.platform != 'android'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: bin/${{ matrix.binary }}
          asset_name: ${{ matrix.binary }}

      - name: Upload export template
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: bin/${{ matrix.exporttemplate }}
          asset_name: ${{ matrix.exporttemplate }}